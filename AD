-- Step 1: Create an anomaly detection model using the sum_of_sales column
-- This uses Snowflake's built-in ML to automatically choose the algorithm (e.g., histogram or isolation forest)
CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION my_sales_anomaly_detector()
  FROM (
    SELECT sum_of_sales
    FROM your_schema.your_sales_table
  );

-- Step 2: Predict anomalies using the trained detector
-- The result will add a column: 
--   anomaly_prediction = -1 for anomaly, 
--   anomaly_prediction = 1 for normal
SELECT 
  year_quarter,
  sum_of_sales,
  my_sales_anomaly_detector!PREDICT(sum_of_sales) AS anomaly_prediction
FROM your_schema.your_sales_table;

-- Step 3 (Optional): Save the results to a new table for analysis or reporting
CREATE OR REPLACE TABLE your_schema.sales_with_anomalies AS
SELECT 
  year_quarter,
  sum_of_sales,
  my_sales_anomaly_detector!PREDICT(sum_of_sales) AS anomaly_prediction
FROM your_schema.your_sales_table;



CREATE OR REPLACE TABLE summary_data_anomalies AS
SELECT *
FROM TABLE(
  SNOWFLAKE.ML.ANOMALY_DETECTION(
    INPUT_DATA => SYSTEM$REFERENCE('TABLE', 'summary_data'),
    TIMESTAMP_COLNAME => 'year_qtr',
    TARGET_COLNAME => 'sum_of_sales'
  )
);



import subprocess
import smtplib
from email.mime.text import MIMEText
import pandas as pd

# --- CONFIGURATION ---
TABLE_EMAIL_MAPPING = {
    'table_1': 'user1@example.com',
    'table_2': 'user2@example.com',
    'table_3': 'user3@example.com',
    # ... up to table_10
}

SMTP_CONFIG = {
    'server': 'smtp.yourmail.com',
    'port': 587,
    'username': 'alerts@yourdomain.com',
    'password': 'yourpassword'
}

FROM_EMAIL = "alerts@yourdomain.com"
TO_EMAIL = "vduppuluri@gmail.com"  # Email address where to send all anomaly details
SNOWSQL_CONN = "serv_source"

# --- Helper Functions ---
def run_snowsql(query):
    """Executes a SnowSQL query and returns the output."""
    command = [
        "snowsql",
        "-c", SNOWSQL_CONN,
        "-q", query
    ]
    result = subprocess.run(command, capture_output=True, text=True)
    if result.returncode != 0:
        raise RuntimeError(f"SnowSQL Error:\n{result.stderr}")
    return result.stdout

def create_detector(table):
    """Creates an anomaly detector for the given table."""
    detector_name = f"detector_{table}"
    sql = f"""
    CREATE OR REPLACE SNOWFLAKE.ML.ANOMALY_DETECTION {detector_name}()
    FROM (SELECT sum_of_sales FROM {table});
    """
    run_snowsql(sql)
    return detector_name

def predict_and_store(table, detector_name):
    """Predicts anomalies and stores results in a new table."""
    result_table = f"{table}_with_anomalies"
    sql = f"""
    CREATE OR REPLACE TABLE {result_table} AS
    SELECT *,
           {detector_name}!PREDICT(sum_of_sales) AS anomaly_prediction
    FROM {table};
    """
    run_snowsql(sql)
    return result_table

def fetch_anomalies(result_table):
    """Fetches anomalies from the result table and returns them as a list."""
    sql = f"""
    SELECT * FROM {result_table} WHERE anomaly_prediction = -1;
    """
    output = run_snowsql(sql)
    lines = output.splitlines()
    rows = [line for line in lines if line.strip() and '|' in line and not line.startswith('+')]
    return rows

def send_email(to_email, subject, body):
    """Sends the email with the given subject and body."""
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = FROM_EMAIL
    msg['To'] = to_email

    with smtplib.SMTP(SMTP_CONFIG['server'], SMTP_CONFIG['port']) as server:
        server.starttls()
        server.login(SMTP_CONFIG['username'], SMTP_CONFIG['password'])
        server.send_message(msg)

# --- MAIN SCRIPT ---
all_anomalies = []  # List to hold anomalies from all tables

# Loop over each table and gather anomalies
for table, _ in TABLE_EMAIL_MAPPING.items():
    print(f"Processing: {table}")
    detector = create_detector(table)
    result_table = predict_and_store(table, detector)
    anomalies = fetch_anomalies(result_table)

    if anomalies:
        print(f"Anomalies found in {table}")
        all_anomalies.extend(anomalies)  # Append the anomalies to the list
    else:
        print(f"No anomalies found in {table}")

# Convert all anomalies into a DataFrame
anomalies_df = pd.DataFrame(all_anomalies, columns=["Anomaly Details"])
if not anomalies_df.empty:
    # Convert the DataFrame to string format (table view)
    anomalies_str = anomalies_df.to_string(index=False)
    
    # Send the anomalies as the email body
    send_email(
        to_email=TO_EMAIL,
        subject="Anomaly Detection Results",
        body=f"Anomalies detected across tables:\n\n{anomalies_str}"
    )
else:
    print("No anomalies found across all tables.")





from snowflake.ml.anomaly_detection import HistogramBasedDetector

# Initialize the detector
detector = HistogramBasedDetector()

# Fit and detect anomalies
detector.fit(pandas_df[['value']])
anomalies = detector.predict(pandas_df[['value']])
