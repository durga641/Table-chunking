import subprocess
import os
import snowflake.connector

# Function to get modified SQL files between last commit and current state
def get_modified_sql_files():
    # Run the git diff command to get modified files between HEAD~1 and HEAD
    result = subprocess.run(['git', 'diff', '--name-only', 'HEAD~1', 'HEAD'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    modified_files = result.stdout.splitlines()

    # Filter for .sql files
    sql_files = [file for file in modified_files if file.endswith('.sql')]

    return sql_files

# Function to execute the SQL files on Snowflake using the Snowflake connector
def execute_sql_on_snowflake(sql_files, private_key_path):
    # Snowflake connection parameters (replace with your actual Snowflake account details)
    conn = snowflake.connector.connect(
        user='<YOUR_SNOWFLAKE_USERNAME>',
        account='<YOUR_SNOWFLAKE_ACCOUNT>.snowflakecomputing.com',
        warehouse='<YOUR_WAREHOUSE>',
        database='<YOUR_DATABASE>',
        schema='<YOUR_SCHEMA>',
        private_key_file=private_key_path  # Path to your private key file
    )

    cursor = conn.cursor()

    for sql_file in sql_files:
        if os.path.exists(sql_file):
            print(f"Executing SQL file: {sql_file}")
            with open(sql_file, 'r') as file:
                sql_query = file.read()
                try:
                    cursor.execute(sql_query)
                    print(f"Successfully executed {sql_file}")
                except Exception as e:
                    print(f"Error executing {sql_file}: {e}")
        else:
            print(f"File {sql_file} not found.")

    cursor.close()
    conn.close()

# Main function to manage the process
def main():
    # The private key is stored in Bitbucket variable (base64 encoded)
    # Decode the private key and save it to a file
    private_key_content = os.getenv('GPG_PRIVATE_KEY')  # Or use any other secret storage
    private_key_path = "/tmp/snowflake_private_key.p8"

    # Write the private key to a temporary file
    with open(private_key_path, "w") as f:
        f.write(private_key_content)

    # Get modified SQL files
    sql_files = get_modified_sql_files()

    if sql_files:
        print(f"Found modified SQL files: {', '.join(sql_files)}")
        # Execute the modified SQL files on Snowflake
        execute_sql_on_snowflake(sql_files, private_key_path)
    else:
        print("No SQL files modified.")

if __name__ == "__main__":
    main()
